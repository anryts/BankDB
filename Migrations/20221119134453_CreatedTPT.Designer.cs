// <auto-generated />
using System;
using BankDB.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BankDB.Migrations
{
    [DbContext(typeof(BankContext))]
    [Migration("20221119134453_CreatedTPT")]
    partial class CreatedTPT
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BankDB.Models.AccountInBank", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountId"));

                    b.Property<decimal>("AmountOnAccount")
                        .HasColumnType("numeric");

                    b.Property<int?>("ClientPersonId")
                        .HasColumnType("integer");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AccountId");

                    b.HasIndex("ClientPersonId");

                    b.ToTable("AccountInBank");
                });

            modelBuilder.Entity("BankDB.Models.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BankId"));

                    b.Property<string>("BankAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("BankId");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("BankDB.Models.Client", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PersonId"));

                    b.Property<string>("Citizenship")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Ukraine");

                    b.Property<string>("EmailAddres")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("FirsName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("PersonId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BankDB.Models.Employee", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PersonId"));

                    b.Property<string>("EmailAddres")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("EmployeePhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirsName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("OccupationId")
                        .HasColumnType("integer");

                    b.HasKey("PersonId");

                    b.HasIndex("OccupationId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("BankDB.Models.Occupation", b =>
                {
                    b.Property<int>("OccupationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OccupationId"));

                    b.Property<string>("OccupationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("OccupationId");

                    b.ToTable("Occupation");
                });

            modelBuilder.Entity("BankDB.Models.ServiceForClientInBank", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceInBankId")
                        .HasColumnType("integer");

                    b.HasKey("ClientId", "ServiceInBankId");

                    b.HasIndex("ServiceInBankId");

                    b.ToTable("ServiceForClientInBank");
                });

            modelBuilder.Entity("BankDB.Models.ServiceInBank", b =>
                {
                    b.Property<int>("ServiceInBankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServiceInBankId"));

                    b.Property<int>("ClientPersonId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfService")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeePersonId")
                        .HasColumnType("integer");

                    b.Property<string>("NameOfService")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ServiceInBankId");

                    b.HasIndex("ClientPersonId");

                    b.HasIndex("EmployeePersonId");

                    b.ToTable("ServiceInBank");
                });

            modelBuilder.Entity("BankDB.Models.Transaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("AccountInBankAccountId")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountInBankAccountId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("BankDB.Models.WorkingDay", b =>
                {
                    b.Property<int>("WorkingDayId")
                        .HasColumnType("integer");

                    b.Property<string>("DayOfTheWeek")
                        .HasColumnType("text");

                    b.Property<string>("CloseTime")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("OpenTime")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("WorkingDayId", "DayOfTheWeek")
                        .HasName("WorkingDay_id");

                    b.ToTable("WorkingDay");
                });

            modelBuilder.Entity("BankDB.Models.AccountInBank", b =>
                {
                    b.HasOne("BankDB.Models.Client", null)
                        .WithMany("AccountsInBank")
                        .HasForeignKey("ClientPersonId");
                });

            modelBuilder.Entity("BankDB.Models.Employee", b =>
                {
                    b.HasOne("BankDB.Models.Occupation", "Occupation")
                        .WithMany()
                        .HasForeignKey("OccupationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Occupation");
                });

            modelBuilder.Entity("BankDB.Models.ServiceForClientInBank", b =>
                {
                    b.HasOne("BankDB.Models.Client", "Client")
                        .WithMany("ServiceForClientInBanks")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankDB.Models.ServiceInBank", "ServiceInBank")
                        .WithMany("ServiceForClientInBanks")
                        .HasForeignKey("ServiceInBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ServiceInBank");
                });

            modelBuilder.Entity("BankDB.Models.ServiceInBank", b =>
                {
                    b.HasOne("BankDB.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankDB.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BankDB.Models.Transaction", b =>
                {
                    b.HasOne("BankDB.Models.AccountInBank", null)
                        .WithMany("Transactions")
                        .HasForeignKey("AccountInBankAccountId");
                });

            modelBuilder.Entity("BankDB.Models.AccountInBank", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BankDB.Models.Client", b =>
                {
                    b.Navigation("AccountsInBank");

                    b.Navigation("ServiceForClientInBanks");
                });

            modelBuilder.Entity("BankDB.Models.ServiceInBank", b =>
                {
                    b.Navigation("ServiceForClientInBanks");
                });
#pragma warning restore 612, 618
        }
    }
}
